import sqlite3 as db
import pandas as pd
import tkinter as tk
from tkinter import ttk

# Connects to the SQLite database file
conn = db.connect('sqlite.db')

# Cursor is used to execute SQL commands
cursor = conn.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL, description TEXT)")

# Verify the table creation
cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
# print(cursor.fetchall())

# Insert sample data into the Products table
#cursor.execute("INSERT INTO Products VALUES (1, '3HP Motor 220V', 'Motors', 150.00, 'A powerful 3 horsepower motor operating at 220 volts.')")
#cursor.execute("INSERT INTO Products VALUES (2, '5HP Motor 110V', 'Motors', 200.00, 'A robust 5 horsepower motor operating at 110 volts.')")
#cursor.execute("INSERT INTO Products VALUES (3, 'Industrial Fan', 'Fans', 75.00, 'A high-speed industrial fan for cooling purposes.')")

# Better way to add multiple records to the database
products = [ (1, '3HP Motor 220V', 'Motors', 150.00, 'A powerful 3 horsepower motor operating at 220 volts.'),
    (2, '5HP Motor 110V', 'Motors', 200.00, 'A robust 5 horsepower motor operating at 110 volts.'),
    (3, 'Industrial Fan', 'Fans', 75.00, 'A high-speed industrial fan for cooling purposes.'),(4, 'Hydraulic Pump', 'Pumps', 300.00, 'A durable hydraulic pump for industrial applications.'),
    (5, 'Conveyor Belt', 'Conveyors', 500.00, 'A heavy-duty conveyor belt for material handling.'),
    (6, 'Air Compressor', 'Compressors', 250.00, 'A reliable air compressor for various pneumatic tools.'),
    (7, 'Gearbox', 'Transmissions', 400.00, 'A high-performance gearbox for machinery.'),
    (8, 'Industrial Valve', 'Valves', 120.00, 'A sturdy industrial valve for fluid control.'),
    (9, 'Electric Actuator', 'Actuators', 350.00, 'An electric actuator for precise movement control.'),
    (10, 'Cooling Tower', 'Cooling Systems', 800.00, 'A large cooling tower for industrial cooling needs.'),(11, 'Industrial Robot Arm', 'Robotics', 1500.00, 'A versatile industrial robot arm for automation tasks.'),
    (12, 'PLC Controller', 'Controllers', 600.00, 'A programmable logic controller for industrial automation.'),
    (13, 'Industrial Sensor', 'Sensors', 90.00, 'A high-precision industrial sensor for monitoring applications.')]
cursor.executemany("INSERT OR IGNORE INTO Products VALUES (?, ?, ?, ?, ?)", products)

cursor.execute("SELECT * FROM Products")


# Commit changes and close the connection
conn.commit()
conn.close()

con = db.connect('sqlite.db')
df = pd.read_sql_query("SELECT * FROM Products", con)


# To remove the last product from the table
#df_new = df[:-1]

def fetch_all_products():
    con = db.connect('sqlite.db')
    df = pd.read_sql_query("SELECT * FROM Products", con)
    con.close()
    return df

def search_products_by_keyword(keyword):
    con = db.connect('sqlite.db')
    query = "SELECT * FROM Products WHERE name LIKE ? OR description LIKE ?"
    df = pd.read_sql_query(query, con, params=(f'%{keyword}%', f'%{keyword}%'))
    con.close()
    return df

def get_product_by_id(product_id):
    con = db.connect('sqlite.db')
    query = "SELECT * FROM Products WHERE product_id = ?"
    df = pd.read_sql_query(query, con, params=(product_id,))
    con.close()
    return df

# Creating a serch function
def update_treeview_with_search(keyword):
    # Clear existing entries in the treeview
    for item in tree.get_children():
        tree.delete(item)
    
    # Fetch products matching the search keyword
    search_results = search_products_by_keyword(keyword)
    
    # Insert search results into the treeview
    for index, row in search_results.iterrows():
        tree.insert("", "end", values=(row['product_id'], row['name'], row['category'], row['price'], row['description']))
def on_search():
    keyword = search_entry.get()
    update_treeview_with_search(keyword)
    update_treeview_with_search(keyword)

# Creating a GUI window to display the table
root = tk.Tk()
root.title("AI Product Advisor - Product Database")

# Create Treeview widget
tree = ttk.Treeview(root, columns=("product_id", "name", "category", "price", "description"), show='headings')

# Define the columns
columns = ["product_id", "name", "category", "price", "description"]
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=150)

#Create a scrollbar 
scrollbar = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
tree.configure(yscrollcommand=scrollbar.set)
scrollbar.pack(side='right', fill='y')

search_frame = tk.Frame(root)
search_frame.pack(fill='x', padx=10, pady=5)
tk.Label(search_frame, text="Search:").pack(side='left')
search_entry = tk.Entry(search_frame)
search_entry.pack(side='left', fill='x', expand=True, padx=5)
search_button = tk.Button(search_frame, text="Search", command=on_search)
search_button.pack(side='left')



# Frame for the entry fields



tree.pack(expand=True, fill='both')

# Fetch all products and insert into the treeview
all_products = fetch_all_products()
for index, row in all_products.iterrows():
    tree.insert("", "end", values=(row['product_id'], row['name'], row['category'], row['price'], row['description']))


root.mainloop()




